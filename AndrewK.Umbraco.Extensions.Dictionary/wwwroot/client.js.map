{"version":3,"file":"client.js","sources":["../client/src/ak-input-dictionary-item.element.ts","../client/src/property-editor-ui-ak-dictionary.element.ts"],"sourcesContent":["import { css, customElement, html, nothing, property, query, state, when } from '@umbraco-cms/backoffice/external/lit'\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal'\nimport { UmbChangeEvent, UmbInputEvent, UmbDeleteEvent } from '@umbraco-cms/backoffice/event'\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element'\nimport { UUIFormControlMixin } from '@umbraco-cms/backoffice/external/uui'\nimport type { UUIInputElement, UUIInputEvent } from '@umbraco-cms/backoffice/external/uui'\n\nimport type { KeyValuePair } from \"./types\"\n\n@customElement('ak-input-dictionary-item')\nexport class AkInputDictionaryItemElement\n    extends UUIFormControlMixin<KeyValuePair, typeof UmbLitElement, undefined>(UmbLitElement, undefined) {\n    @state() private _value: KeyValuePair = { key: '', value: '' }\n\n    constructor() {\n        super()\n    }\n\n    @property({ type: Boolean, reflect: true }) disabled = false\n    @property({ type: Boolean, reflect: true }) readonly = false\n\n    @property({ type: Object})\n    public get value(): KeyValuePair {\n        return this._value\n    }\n\n    public set value(kvp: KeyValuePair) {\n        this._value = kvp || { key: '', value: '' }\n    }\n\n    @query('#input-key') protected _keyInput?: UUIInputElement\n    @query('#input-value') protected _valueInput?: UUIInputElement\n\n    async #onDelete() {\n        await umbConfirmModal(this, {\n            headline: `Delete ${ this._value.key || 'item' }`,\n            content: 'Are you sure you want to delete this item?',\n            color: 'danger',\n            confirmLabel: 'Delete',\n        })\n\n        this.dispatchEvent(new UmbDeleteEvent())\n    }\n\n    #onKeyInput(event: UUIInputEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        this._value = { ...this._value, key: target.value as string }\n        this.dispatchEvent(new UmbInputEvent())\n    }\n\n    #onValueInput(event: UUIInputEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        this._value = { ...this._value, value: target.value as string }\n        this.dispatchEvent(new UmbInputEvent())\n    }\n\n    #onKeydown(event: KeyboardEvent) {\n        event.stopPropagation()\n\n        if (event.key !== 'Enter') {\n            return\n        }\n\n        if (!this._value.key) {\n            this._keyInput?.focus()\n        } else if (!this._value.value) {\n            this._valueInput?.focus()\n        } else {\n            this.dispatchEvent(new CustomEvent('enter'))\n        }\n    }\n\n    #onKeyChange(event: UUIInputEvent) {\n        event.stopPropagation()\n\n        const target = event.currentTarget as UUIInputElement\n        this._value = { ...this._value, key: target.value as string }\n\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n    \n    #onValueChange(event: UUIInputEvent) {\n        event.stopPropagation()\n\n        const target = event.currentTarget as UUIInputElement\n        this._value = { ...this._value, value: target.value as string }\n\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    #onValid = (event: Event) => event.stopPropagation()\n    #onInvalid = (event: Event) => event.stopPropagation()\n\n    public override async focus() {\n        await this.updateComplete\n        this._keyInput?.focus()\n    }\n\n    override render() {\n        return html`\n          ${ this.disabled || this.readonly ? nothing : html`\n            <uui-icon name=\"icon-navigation\" class=\"handle\"></uui-icon>` }\n\n          <umb-form-validation-message id=\"validation-message\" @invalid=${ this.#onInvalid } @valid=${ this.#onValid }>\n            <div class=\"kvp-holder\">\n              <uui-input\n                id=\"input-key\"\n                label=\"Key\"\n                placeholder=\"Key\"\n                value=${ this._value.key }\n                @keydown=${ this.#onKeydown }\n                @input=${ this.#onKeyInput }\n                @change=${ this.#onKeyChange }\n                ?disabled=${ this.disabled }\n                ?readonly=${ this.readonly }\n                required\n                required-message=\"Key is missing\"\n              ></uui-input>\n              <uui-input\n                id=\"input-value\"\n                label=\"Value\"\n                placeholder=\"Value\"\n                value=${ this._value.value }\n                @keydown=${ this.#onKeydown }\n                @input=${ this.#onValueInput }\n                @change=${ this.#onValueChange }\n                ?disabled=${ this.disabled }\n                ?readonly=${ this.readonly }\n              ></uui-input>\n            </div>\n          </umb-form-validation-message>\n\n          ${ when(\n            !this.readonly,\n            () => html`\n              <uui-button\n                compact\n                color=\"danger\"\n                label=\"${ this.localize.term('general_remove') } ${ this.value }\"\n                look=\"outline\"\n                ?disabled=${ this.disabled }\n                @click=${ this.#onDelete }>\n                <uui-icon name=\"icon-trash\"></uui-icon>\n              </uui-button>\n            `,\n          ) }\n        `\n    }\n\n    static override styles = [\n        css`\n            :host {\n                display: flex;\n                align-items: center;\n                margin-bottom: var(--uui-size-space-3);\n                gap: var(--uui-size-space-3);\n            }\n\n            #validation-message {\n                flex: 1;\n            }\n\n            .kvp-holder {\n                display: inline-flex;\n                justify-content: space-between;\n                gap: 5px;\n                width: 100%;\n                \n                & > * {\n                    flex: 1;\n                }\n            }\n\n            .handle {\n                cursor: move;\n            }\n        `,\n    ]\n\n    protected override getFormElement = () => undefined\n}\n\nexport default AkInputDictionaryItemElement\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'ak-input-dictionary-item': AkInputDictionaryItemElement\n    }\n}\n","import type {\n    UmbPropertyEditorConfigCollection,\n    UmbPropertyEditorUiElement,\n} from '@umbraco-cms/backoffice/property-editor'\nimport type { UmbInputEvent, UmbDeleteEvent } from '@umbraco-cms/backoffice/event'\nimport type { KeyValuePair } from \"./types\"\n\nimport { css, customElement, html, state, property, repeat, nothing } from '@umbraco-cms/backoffice/external/lit'\nimport { UmbValidationContext } from '@umbraco-cms/backoffice/validation'\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element'\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event'\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property'\nimport {\n    UMB_SUBMITTABLE_WORKSPACE_CONTEXT,\n    UmbSubmittableWorkspaceContextBase,\n} from '@umbraco-cms/backoffice/workspace'\nimport { UUIFormControlMixin } from \"@umbraco-cms/backoffice/external/uui\"\nimport { UmbSorterController } from '@umbraco-cms/backoffice/sorter'\nimport AkInputDictionaryItemElement from \"./ak-input-dictionary-item.element.ts\"\n\n@customElement('ak-property-editor-ui-dictionary')\nexport class AkPropertyEditorUIDictionaryElement\n    extends UUIFormControlMixin<Array<KeyValuePair>, typeof UmbLitElement, undefined>(UmbLitElement, undefined)\n    implements UmbPropertyEditorUiElement {\n    #sorter = new UmbSorterController(this, {\n        getUniqueOfElement: (element: HTMLElement) => element.getAttribute('data-sort-entry-id'),\n        getUniqueOfModel: (modelEntry: KeyValuePair) => modelEntry.key,\n        identifier: 'AndrewK.SorterIdentifier.Dictionary',\n        itemSelector: 'ak-input-dictionary-item',\n        containerSelector: '#sorter-wrapper',\n        onChange: ({ model }: { model: Array<KeyValuePair> }) => {\n            this._value = model\n            this.dispatchEvent(new UmbChangeEvent())\n        },\n    })\n\n    @state() private _label?: string\n    @state() private _min = 0\n    @state() private _max = Infinity\n    @state() private _disabled: boolean = false\n    @state() private _readonly: boolean = false\n    @state() private _value: Array<KeyValuePair> = []\n\n    protected _validationContext = new UmbValidationContext(this)\n\n    constructor() {\n        super()\n\n\n        this.addValidator(\n            'valueMissing',\n            () => 'Value is required',\n            () => !this.readonly && this.mandatory && !this.value?.length,\n        )\n\n        this.addValidator(\n            'badInput',\n            () => 'A key is missing',\n            () => !this.readonly && !this.value.map(x => x.key).every(Boolean),\n        )\n\n        this.addValidator(\n            'rangeUnderflow',\n            () => `At least ${ this._min } items are required`,\n            () => !!this._min && this._value.length < this._min,\n        )\n        this.addValidator(\n            'rangeOverflow',\n            () => `Maximum ${ this._max } items allowed`,\n            () => !!this._max && this._value.length > this._max,\n        )\n\n        this.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\n            this._label = context?.getLabel()\n        })\n\n        this.consumeContext(UMB_SUBMITTABLE_WORKSPACE_CONTEXT, (context) => {\n            if (context instanceof UmbSubmittableWorkspaceContextBase) {\n                context.addValidationContext(this._validationContext)\n            }\n        })\n    }\n\n    @property({ type: Boolean, reflect: true }) mandatory = false\n\n    @property({ type: Array })\n    public get value(): Array<KeyValuePair> {\n        return this._value || []\n    }\n\n    public set value(value: unknown) {\n        let newValues: Array<KeyValuePair> = []\n\n        switch (typeof value) {\n            case 'string':\n                newValues.push({ key: value, value: value })\n                break;\n\n            case 'object':\n                if (Array.isArray(value)) {\n                    newValues = this.#updateFromArray((value as Array<unknown>))\n                }\n                break;\n        }\n\n        if (JSON.stringify(this._value) !== JSON.stringify(newValues)) {\n            this._value = newValues\n            this.dispatchEvent(new UmbChangeEvent())\n        }\n\n        this.#sorter.setModel(this.value)\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public set disabled(value) {\n        this._disabled = value\n        if (value) {\n            this.#sorter.disable()\n        }\n    }\n\n    public get disabled() {\n        return this._disabled\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public set readonly(value) {\n        this._readonly = value\n        if (value) {\n            this.#sorter.disable()\n        }\n    }\n\n    public get readonly() {\n        return this._readonly\n    }\n\n    public set config(config: UmbPropertyEditorConfigCollection | undefined) {\n        if (!config) return\n\n        this._min = Number(config.getValueByAlias('min')) || 0\n        this._max = Number(config.getValueByAlias('max')) || Infinity\n    }\n\n    async #onAdd() {\n        this._value = [ ...this._value, { key: '', value: '' } ]\n        this.pristine = false\n        this.dispatchEvent(new UmbChangeEvent())\n        await this.#focusNewItem()\n    }\n\n    #onInput(event: UmbInputEvent, currentIndex: number) {\n        event.stopPropagation()\n\n        const target = event.currentTarget as AkInputDictionaryItemElement\n        const value = target.value\n        this._value = this._value\n            .map((item, index) => (index === currentIndex ? value : item))\n        this.pristine = false\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    #deleteItem(event: UmbDeleteEvent, itemIndex: number) {\n        event.stopPropagation()\n\n        this._value = this._value.filter((_item, index) => index !== itemIndex)\n        this.pristine = false\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    async #focusNewItem() {\n        await this.updateComplete\n        const items = this.shadowRoot?.querySelectorAll(\n            'ak-input-dictionary-item',\n        ) as NodeListOf<AkInputDictionaryItemElement>\n\n        if (!items?.length) {\n            return\n        }\n\n        const newItem = items[items.length - 1]\n        await newItem.focus()\n    }\n\n    override render() {\n        return html`\n          <umb-form-validation-message\n            id=\"validation-message\"\n            @invalid=${ (event: Event) => event.stopPropagation() }\n            @valid=${ (event: Event) => event.stopPropagation() }\n          >\n            <div id=\"sorter-wrapper\">\n              ${ this.#renderItems() }\n            </div>\n            ${ this.#renderInfoBlock() }\n            ${ this.#renderAddButton() }\n          </umb-form-validation-message>\n        `\n    }\n\n    #renderItems() {\n        return html`\n          ${ repeat(\n            this._value,\n            (_, index) => index,\n            (kvp, index) => html`\n              <ak-input-dictionary-item\n                name=\"item-${ index }\"\n                data-sort-entry-id=${ kvp.key }\n                required\n                required-message=\"Item ${ index + 1 } is missing a value\"\n                .value=${ kvp }\n                ?disabled=${ this.disabled }\n                ?readonly=${ this.readonly }\n                @enter=${ this.#onAdd }\n                @delete=${ (event: UmbDeleteEvent) => this.#deleteItem(event, index) }\n                @input=${ (event: UmbInputEvent) => this.#onInput(event, index) }\n              ></ak-input-dictionary-item>\n            `,\n          ) }\n        `\n    }\n\n    #renderAddButton() {\n        if (this.disabled || this.readonly) return nothing\n        return html`\n          <uui-button\n            color=\"default\"\n            id=\"action\"\n            label=\"Add\"\n            look=\"placeholder\"\n            ?disabled=${ this.disabled }\n            @click=${ this.#onAdd }\n          ></uui-button>\n        `\n    }\n\n    #renderInfoBlock() {\n        const keys = this._value.map(x => x.key)\n        const uniqueKeys = new Set(keys)\n\n        if (!keys.length ||\n            keys.length === uniqueKeys.size) {\n            return nothing\n        }\n\n        return html`\n          <uui-box class=\"info-block\">\n            <div slot=\"headline\" class=\"info-block-headline\">\n              <uui-icon name=\"icon-info\"></uui-icon>\n              <p>Duplicated keys detected.</p>\n            </div>\n          </uui-box>\n        `\n    }\n\n    static override styles = [\n        css`\n            #action {\n                display: block;\n            }\n\n            .--umb-sorter-placeholder {\n                position: relative;\n                visibility: hidden;\n            }\n\n            .--umb-sorter-placeholder::after {\n                content: '';\n                position: absolute;\n                inset: 0;\n                border-radius: var(--uui-border-radius);\n                border: 1px dashed var(--uui-color-divider-emphasis);\n            }\n\n            .info-block {\n                background-color: var(--uui-color-disabled-standalone);\n                margin-bottom: var(--uui-size-space-3);\n            }\n\n            .info-block-headline {\n                display: flex;\n                align-items: center;\n                gap: var(--uui-size-space-3);\n            }\n        `,\n    ]\n\n    protected override firstUpdated() {\n        if (this._min && this._max && this._min > this._max) {\n            console.warn(\n                `Property '${ this._label }' (Dictionary) has been misconfigured, 'min' is greater than 'max'. Please correct your data type configuration.`,\n                this,\n            )\n        }\n    }\n\n    #updateFromArray(newValue: Array<unknown>): Array<KeyValuePair> {\n        const result: Array<KeyValuePair> = []\n\n        for (let newValueItem of newValue) {\n            let resultItem: KeyValuePair | undefined = undefined\n\n            switch (typeof newValueItem) {\n                case 'string':\n                    resultItem = { key: newValueItem, value: newValueItem }\n                    break;\n\n                case 'object':\n                    if (!!newValueItem && 'key' in newValueItem && typeof newValueItem.key === 'string') {\n                        resultItem = { key: newValueItem.key, value: '' }\n\n                        if ('value' in newValueItem && typeof newValueItem.value === 'string' && !!newValueItem.value) {\n                            resultItem.value = newValueItem.value\n                        }\n                    }\n                    break;\n            }\n\n            if (!!resultItem) {\n                result.push(resultItem)\n            }\n        }\n\n        return result\n    }\n\n    override getFormElement = () => undefined\n}\n\nexport default AkPropertyEditorUIDictionaryElement\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'ak-property-editor-ui-dictionary': AkPropertyEditorUIDictionaryElement\n    }\n}\n"],"names":["_AkInputDictionaryItemElement_instances","onDelete_fn","onKeyInput_fn","onValueInput_fn","onKeydown_fn","onKeyChange_fn","onValueChange_fn","_onValid","_onInvalid","AkInputDictionaryItemElement","UUIFormControlMixin","UmbLitElement","__privateAdd","event","kvp","_a","html","nothing","__privateGet","__privateMethod","when","umbConfirmModal","UmbDeleteEvent","target","UmbInputEvent","_b","UmbChangeEvent","css","__decorateClass","state","property","query","customElement","_sorter","_AkPropertyEditorUIDictionaryElement_instances","onAdd_fn","onInput_fn","deleteItem_fn","focusNewItem_fn","renderItems_fn","renderAddButton_fn","renderInfoBlock_fn","updateFromArray_fn","AkPropertyEditorUIDictionaryElement","UmbSorterController","element","modelEntry","model","UmbValidationContext","x","UMB_PROPERTY_CONTEXT","context","UMB_SUBMITTABLE_WORKSPACE_CONTEXT","UmbSubmittableWorkspaceContextBase","value","newValues","config","currentIndex","item","index","itemIndex","_item","items","repeat","_","keys","uniqueKeys","newValue","result","newValueItem","resultItem","AkPropertyEditorUIDictionaryElement$1"],"mappings":"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"}