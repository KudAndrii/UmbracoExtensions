{"version":3,"file":"client.js","sources":["../client/src/ak-input-dictionary-item.element.ts","../client/src/ak-input-dictionary.element.ts","../client/src/property-editor-ui-ak-dictionary.element.ts"],"sourcesContent":["import { css, customElement, html, nothing, property, query, state, when } from '@umbraco-cms/backoffice/external/lit'\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal'\nimport { UmbChangeEvent, UmbInputEvent, UmbDeleteEvent } from '@umbraco-cms/backoffice/event'\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element'\nimport { UUIFormControlMixin } from '@umbraco-cms/backoffice/external/uui'\nimport type { UUIInputElement, UUIInputEvent } from '@umbraco-cms/backoffice/external/uui'\n\n@customElement('ak-input-dictionary-item')\nexport class AkInputDictionaryItemElement extends UUIFormControlMixin(UmbLitElement, undefined) {\n    @state() private _kvp: { key: string, value: string } = { key: '', value: '' }\n\n    constructor() {\n        super()\n    }\n\n    @property({ type: Boolean, reflect: true }) disabled = false\n    @property({ type: Boolean, reflect: true }) readonly = false\n\n    @property({ type: Object})\n    public get kvp(): { key: string, value: string } {\n        return this._kvp\n    }\n\n    public set kvp(kvp: { key: string, value: string }) {\n        this._kvp = kvp ?? { key: '', value: '' }\n    }\n\n    @query('#input-key') protected _keyInput?: UUIInputElement\n    @query('#input-value') protected _valueInput?: UUIInputElement\n\n    async #onDelete() {\n        await umbConfirmModal(this, {\n            headline: `Delete ${ this._kvp.value || 'item' }`,\n            content: 'Are you sure you want to delete this item?',\n            color: 'danger',\n            confirmLabel: 'Delete',\n        })\n\n        this.dispatchEvent(new UmbDeleteEvent())\n    }\n\n    #onKeyInput(event: UUIInputEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        this._kvp = { ...this._kvp, key: target.value as string }\n        this.dispatchEvent(new UmbInputEvent())\n    }\n\n    #onValueInput(event: UUIInputEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        this._kvp = { ...this._kvp, value: target.value as string }\n        this.dispatchEvent(new UmbInputEvent())\n    }\n\n    #onKeydown(event: KeyboardEvent) {\n        event.stopPropagation()\n        //TODO: focus empty input (either key or value) if any, then dispatch 'enter'\n        if (event.key === 'Enter' && !!this._kvp.key) {\n            this.dispatchEvent(new CustomEvent('enter'))\n        }\n    }\n\n    #onKeyChange(event: UUIInputEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        this._kvp = { ...this._kvp, key: target.value as string }\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n    \n    #onValueChange(event: UUIInputEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        this._kvp = { ...this._kvp, value: target.value as string }\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    #onValid = (event: Event) => event.stopPropagation()\n    #onInvalid = (event: Event) => event.stopPropagation()\n\n    public override async focus() {\n        await this.updateComplete\n        this._keyInput?.focus()\n    }\n\n    override render() {\n        return html`\n          ${ this.disabled || this.readonly ? nothing : html`\n            <uui-icon name=\"icon-navigation\" class=\"handle\"></uui-icon>` }\n\n          <umb-form-validation-message id=\"validation-message\" @invalid=${ this.#onInvalid } @valid=${ this.#onValid }>\n            <div class=\"kvp-holder\">\n              <uui-input\n                id=\"input-key\"\n                label=\"Key\"\n                value=${ this._kvp.key }\n                @keydown=${ this.#onKeydown }\n                @input=${ this.#onKeyInput }\n                @change=${ this.#onKeyChange }\n                ?disabled=${ this.disabled }\n                ?readonly=${ this.readonly }\n                required=${ this.required }\n                required-message=\"Key is missing\"\n              ></uui-input>\n              <uui-input\n                id=\"input-value\"\n                label=\"Value\"\n                value=${ this._kvp.value }\n                @keydown=${ this.#onKeydown }\n                @input=${ this.#onValueInput }\n                @change=${ this.#onValueChange }\n                ?disabled=${ this.disabled }\n                ?readonly=${ this.readonly }\n              ></uui-input>\n            </div>\n          </umb-form-validation-message>\n\n          ${ when(\n            !this.readonly,\n            () => html`\n              <uui-button\n                compact\n                color=\"danger\"\n                label=\"${ this.localize.term('general_remove') } ${ this.value }\"\n                look=\"outline\"\n                ?disabled=${ this.disabled }\n                @click=${ this.#onDelete }>\n                <uui-icon name=\"icon-trash\"></uui-icon>\n              </uui-button>\n            `,\n          ) }\n        `\n    }\n\n    static override styles = [\n        css`\n            :host {\n                display: flex;\n                align-items: center;\n                margin-bottom: var(--uui-size-space-3);\n                gap: var(--uui-size-space-3);\n            }\n\n            #validation-message {\n                flex: 1;\n            }\n\n            .kvp-holder {\n                display: inline-flex;\n                justify-content: space-between;\n                gap: 5px;\n                width: 100%;\n                \n                & > * {\n                    flex: 1;\n                }\n            }\n\n            .handle {\n                cursor: move;\n            }\n        `,\n    ]\n\n    protected override getFormElement = () => undefined\n}\n\nexport default AkInputDictionaryItemElement\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'ak-input-dictionary-item': AkInputDictionaryItemElement\n    }\n}\n","import type { UmbInputEvent, UmbDeleteEvent } from '@umbraco-cms/backoffice/event'\nimport { css, html, nothing, repeat, customElement, property, state } from '@umbraco-cms/backoffice/external/lit'\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event'\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element'\nimport { UmbSorterController } from '@umbraco-cms/backoffice/sorter'\nimport { UUIFormControlMixin } from \"@umbraco-cms/backoffice/external/uui\"\n\nimport AkInputDictionaryItemElement from './ak-input-dictionary-item.element'\n\n@customElement('ak-input-dictionary')\nexport class AkInputDictionaryElement extends UUIFormControlMixin(UmbLitElement, undefined) {\n    @state() private _items: Array<{ key: string, value: string }> = []\n\n    #disabled = false\n    #readonly = false\n    \n    #sorter = new UmbSorterController(this, {\n        getUniqueOfElement: (element) => element.getAttribute('data-sort-entry-id'),\n        getUniqueOfModel: (modelEntry: { key: string, value: string }) => modelEntry.key,\n        identifier: 'AndrewK.SorterIdentifier.Dictionary',\n        itemSelector: 'ak-input-dictionary-item',\n        containerSelector: '#sorter-wrapper',\n        onChange: ({ model }) => {\n            const oldValue = this._items\n            this._items = model\n            this.requestUpdate('_items', oldValue)\n            this.dispatchEvent(new UmbChangeEvent())\n        },\n    })\n\n    constructor() {\n        super()\n\n        // TODO: we need a way to overwrite the missing value validator. Se we can validate on other properties than value\n        /*\n        this.removeValidator('valueMissing')\n\n        this.addValidator(\n            'valueMissing',\n            () => this.requiredMessage,\n            () => this.items.length > 0\n        )\n        */\n\n        this.addValidator(\n            'rangeUnderflow',\n            () => this.minMessage,\n            () => !!this.min && this._items.length < this.min,\n        )\n        this.addValidator(\n            'rangeOverflow',\n            () => this.maxMessage,\n            () => !!this.max && this._items.length > this.max,\n        )\n    }\n\n    @property({ type: Number }) min?: number\n    @property({ type: String, attribute: 'min-message' }) minMessage = 'This field need more items'\n    @property({ type: Number }) max?: number\n\n    @property({ type: String, attribute: 'min-message' })\n    maxMessage = 'This field exceeds the allowed amount of items'\n\n    @property({ type: Boolean, reflect: true })\n    public set disabled(value) {\n        this.#disabled = value\n        if (value) {\n            this.#sorter.disable()\n        }\n    }\n\n    public get disabled() {\n        return this.#disabled\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public set readonly(value) {\n        this.#readonly = value\n        if (value) {\n            this.#sorter.disable()\n        }\n    }\n\n    public get readonly() {\n        return this.#readonly\n    }\n\n    @property({ type: Array })\n    public get items(): Array<{ key: string, value: string }> {\n        return this._items\n    }\n\n    public set items(items: Array<{ key: string, value: string }>) {\n        // TODO: when we have a way to overwrite the missing value validator we can remove this\n        this.value = items?.length > 0 ? 'some value' : ''\n        this._items = items ?? []\n        this.#sorter.setModel(this.items)\n    }\n\n    // TODO: Some inputs might not have a value that is either FormDataEntryValue or FormData.\n    //  How do we handle this?\n    /*\n    @property()\n    public set value(value: FormDataEntryValue | FormData) {\n        throw new Error(`${this} does not support to set the value directly. Use items instead.`)\n    }\n    public get value() {\n        throw new Error(`${this} does not support to get the value directly. Use items instead.`)\n    }\n    */\n\n    override render() {\n        return html`\n          <div id=\"sorter-wrapper\">\n            ${ this.#renderItems() }\n          </div>\n          ${ this.#renderInfoBlock() }\n          ${ this.#renderAddButton() }\n        `\n    }\n\n    async #onAdd() {\n        this._items = [ ...this._items, { key: '', value: '' } ]\n        this.pristine = false\n        this.dispatchEvent(new UmbChangeEvent())\n        await this.#focusNewItem()\n    }\n\n    #onInput(event: UmbInputEvent, currentIndex: number) {\n        event.stopPropagation()\n        const target = event.currentTarget as AkInputDictionaryItemElement\n        const value = target.kvp\n        this._items = this._items\n            .map((item, index) => (index === currentIndex ? value : item))\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    async #focusNewItem() {\n        await this.updateComplete\n        const items = this.shadowRoot?.querySelectorAll(\n            'ak-input-dictionary-item',\n        ) as NodeListOf<AkInputDictionaryItemElement>\n        const newItem = items[items.length - 1]\n        await newItem.focus()\n    }\n\n    #deleteItem(event: UmbDeleteEvent, itemIndex: number) {\n        event.stopPropagation()\n        this._items = this._items.filter((_item, index) => index !== itemIndex)\n        this.pristine = false\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    #renderItems() {\n        return html`\n          ${ repeat(\n            this._items,\n            (_item, index) => index,\n            (item, index) => html`\n              <ak-input-dictionary-item\n                name=\"item-${ index }\"\n                data-sort-entry-id=${ item.key }\n                required\n                required-message=\"Item ${ index + 1 } is missing a value\"\n                .kvp=${ item }\n                ?disabled=${ this.disabled }\n                ?readonly=${ this.readonly }\n                @enter=${ this.#onAdd }\n                @delete=${ (event: UmbDeleteEvent) => this.#deleteItem(event, index) }\n                @input=${ (event: UmbInputEvent) => this.#onInput(event, index) }\n              ></ak-input-dictionary-item>\n            `,\n          ) }\n        `\n    }\n\n    #renderAddButton() {\n        if (this.disabled || this.readonly) return nothing\n        return html`\n          <uui-button\n            color=\"default\"\n            id=\"action\"\n            label=\"Add\"\n            look=\"placeholder\"\n            ?disabled=${ this.disabled }\n            @click=${ this.#onAdd }\n          ></uui-button>\n        `\n    }\n    \n    #renderInfoBlock() {\n        if (this.items.length === new Set(this.items.map(x => x.key)).size) return nothing\n        return html`\n          <uui-box class=\"info-block\">\n            <div slot=\"headline\" class=\"info-block-headline\">\n              <uui-icon name=\"icon-info\"></uui-icon>\n              <p>Duplicated keys detected.</p>\n            </div>\n          </uui-box>\n        `\n    }\n\n    static override styles = [\n        css`\n            #action {\n                display: block;\n            }\n\n            .--umb-sorter-placeholder {\n                position: relative;\n                visibility: hidden;\n            }\n\n            .--umb-sorter-placeholder::after {\n                content: '';\n                position: absolute;\n                inset: 0;\n                border-radius: var(--uui-border-radius);\n                border: 1px dashed var(--uui-color-divider-emphasis);\n            }\n            \n            .info-block {\n                background-color: var(--uui-color-disabled-standalone);\n                margin-bottom: var(--uui-size-space-3);\n            }\n            \n            .info-block-headline {\n                display: flex;\n                align-items: center;\n                gap: var(--uui-size-space-3);\n            }\n        `,\n    ]\n\n    override getFormElement = () => undefined\n}\n\nexport default AkInputDictionaryElement\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'ak-input-dictionary': AkInputDictionaryElement\n    }\n}\n","import { customElement, html, property, query, state } from '@umbraco-cms/backoffice/external/lit'\nimport { umbBindToValidation, UmbValidationContext } from '@umbraco-cms/backoffice/validation'\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element'\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property'\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event'\nimport {\n    UMB_SUBMITTABLE_WORKSPACE_CONTEXT,\n    UmbSubmittableWorkspaceContextBase,\n} from '@umbraco-cms/backoffice/workspace'\nimport type {\n    UmbPropertyEditorConfigCollection,\n    UmbPropertyEditorUiElement,\n} from '@umbraco-cms/backoffice/property-editor'\n\nimport AkInputDictionaryElement from \"./ak-input-dictionary.element\"\n\n@customElement('ak-property-editor-ui-dictionary')\nexport class AkPropertyEditorUIDictionaryElement extends UmbLitElement implements UmbPropertyEditorUiElement {\n    @state() private _label?: string\n    @state() private _min = 0\n    @state() private _max = Infinity\n    private _value: Array<{ key: string, value: string }> = []\n\n    protected _validationContext = new UmbValidationContext(this)\n\n    @query('#input', true) protected _inputElement?: AkInputDictionaryElement\n\n    constructor() {\n        super()\n\n        this.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\n            this._label = context?.getLabel()\n        })\n\n        this.consumeContext(UMB_SUBMITTABLE_WORKSPACE_CONTEXT, (context) => {\n            if (context instanceof UmbSubmittableWorkspaceContextBase) {\n                context.addValidationContext(this._validationContext)\n            }\n        })\n    }\n\n    @property({ type: Array })\n    public get value(): Array<{ key: string, value: string }> {\n        return this._value || []\n    }\n\n    public set value(value: unknown) {\n        let newValues: Array<{ key: string, value: string }> = []\n\n        switch (typeof value) {\n            case 'string':\n                newValues.push({ key: value, value: value })\n                break;\n\n            case 'object':\n                if (Array.isArray(value)) {\n                    newValues = this.updateFromArray((value as Array<unknown>))\n                }\n                break;\n        }\n\n        this._value = newValues\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    @property({ type: Boolean, reflect: true }) disabled = false\n    @property({ type: Boolean, reflect: true }) readonly = false\n    @property({ type: Boolean, reflect: true }) required = false\n\n    public set config(config: UmbPropertyEditorConfigCollection | undefined) {\n        if (!config) return\n\n        this._min = Number(config.getValueByAlias('min')) || 0\n        this._max = Number(config.getValueByAlias('max')) || Infinity\n    }\n\n    #onChange(event: UmbChangeEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as AkInputDictionaryElement\n        this.value = target.items\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    #onValid = (event: Event) => event.stopPropagation()\n    #onInvalid = (event: Event) => event.stopPropagation()\n\n    override render() {\n        return html`\n          <umb-form-validation-message\n            id=\"validation-message\"\n            @invalid=${ this.#onInvalid }\n            @valid=${ this.#onValid }\n          >\n            <ak-input-dictionary\n              id=\"input\"\n              max=${ this._max }\n              min=${ this._min }\n              .items=${ this.value ?? [] }\n              ?disabled=${ this.disabled }\n              ?readonly=${ this.readonly }\n              ?required=${ this.required }\n              @change=${ this.#onChange }\n              ${ umbBindToValidation(this) }\n            ></ak-input-dictionary>\n          </umb-form-validation-message>\n        `\n    }\n\n    protected override firstUpdated() {\n        if (this._min && this._max && this._min > this._max) {\n            console.warn(\n                `Property '${ this._label }' (Dictionary) has been misconfigured, 'min' is greater than 'max'. Please correct your data type configuration.`,\n                this,\n            )\n        }\n    }\n\n    private updateFromArray(newValue: Array<unknown>): Array<{ key: string, value: string }> {\n        const result: Array<{ key: string, value: string }> = []\n\n        for (let newValueItem of newValue) {\n            let resultItem: { key: string, value: string } | undefined = undefined\n\n            switch (typeof newValueItem) {\n                case 'string':\n                    resultItem = { key: newValueItem, value: newValueItem }\n                    break;\n\n                case 'object':\n                    if (!!newValueItem && 'key' in newValueItem && typeof newValueItem.key === 'string') {\n                        resultItem = { key: newValueItem.key, value: '' }\n\n                        if ('value' in newValueItem && typeof newValueItem.value === 'string' && !!newValueItem.value) {\n                            resultItem.value = newValueItem.value\n                        }\n                    }\n                    break;\n            }\n\n            if (!!resultItem) {\n                result.push(resultItem)\n            }\n        }\n\n        return result\n    }\n}\n\nexport default AkPropertyEditorUIDictionaryElement\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'ak-property-editor-ui-dictionary': AkPropertyEditorUIDictionaryElement\n    }\n}\n"],"names":["_AkInputDictionaryItemElement_instances","onDelete_fn","onKeyInput_fn","onValueInput_fn","onKeydown_fn","onKeyChange_fn","onValueChange_fn","_onValid","_onInvalid","AkInputDictionaryItemElement","UUIFormControlMixin","UmbLitElement","__privateAdd","event","kvp","_a","html","nothing","__privateGet","__privateMethod","when","umbConfirmModal","UmbDeleteEvent","target","UmbInputEvent","UmbChangeEvent","css","__decorateClass","state","property","query","customElement","_disabled","_readonly","_sorter","_AkInputDictionaryElement_instances","onAdd_fn","onInput_fn","focusNewItem_fn","deleteItem_fn","renderItems_fn","renderAddButton_fn","renderInfoBlock_fn","AkInputDictionaryElement","UmbSorterController","element","modelEntry","model","oldValue","value","__privateSet","items","currentIndex","item","index","itemIndex","_item","repeat","x","_AkPropertyEditorUIDictionaryElement_instances","onChange_fn","AkPropertyEditorUIDictionaryElement","UmbValidationContext","UMB_PROPERTY_CONTEXT","context","UMB_SUBMITTABLE_WORKSPACE_CONTEXT","UmbSubmittableWorkspaceContextBase","newValues","config","umbBindToValidation","newValue","result","newValueItem","resultItem","AkPropertyEditorUIDictionaryElement$1"],"mappings":"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"}