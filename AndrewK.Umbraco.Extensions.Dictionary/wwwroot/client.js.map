{"version":3,"file":"client.js","sources":["../client/src/ak-input-dictionary-item.element.ts","../client/src/ak-input-dictionary.element.ts","../client/src/property-editor-ui-ak-dictionary.element.ts"],"sourcesContent":["import { css, customElement, html, nothing, property, query, when } from '@umbraco-cms/backoffice/external/lit'\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal'\nimport { UmbChangeEvent, UmbInputEvent, UmbDeleteEvent } from '@umbraco-cms/backoffice/event'\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element'\nimport { UUIFormControlMixin } from '@umbraco-cms/backoffice/external/uui'\nimport type { UUIInputElement, UUIInputEvent } from '@umbraco-cms/backoffice/external/uui'\n\n@customElement('ak-input-dictionary-item')\nexport class AkInputDictionaryItemElement extends UUIFormControlMixin(UmbLitElement, undefined) {\n    constructor() {\n        super()\n    }\n\n    @property({ type: Boolean, reflect: true }) disabled = false\n    @property({ type: Boolean, reflect: true }) readonly = false\n\n    @query('#input') protected _input?: UUIInputElement\n\n    async #onDelete() {\n        await umbConfirmModal(this, {\n            headline: `Delete ${ this.value || 'item' }`,\n            content: 'Are you sure you want to delete this item?',\n            color: 'danger',\n            confirmLabel: 'Delete',\n        })\n\n        this.dispatchEvent(new UmbDeleteEvent())\n    }\n\n    #onInput(event: UUIInputEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        this.value = target.value as string\n        this.dispatchEvent(new UmbInputEvent())\n    }\n\n    #onKeydown(event: KeyboardEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        if (event.key === 'Enter' && target.value) {\n            this.dispatchEvent(new CustomEvent('enter'))\n        }\n    }\n\n    #onChange(event: UUIInputEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as UUIInputElement\n        this.value = target.value as string\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    #onValid = (event: Event) => event.stopPropagation()\n    #onInvalid = (event: Event) => event.stopPropagation()\n\n    public override async focus() {\n        await this.updateComplete\n        this._input?.focus()\n    }\n\n    override render() {\n        return html`\n          ${ this.disabled || this.readonly ? nothing : html`\n            <uui-icon name=\"icon-navigation\" class=\"handle\"></uui-icon>` }\n\n          <umb-form-validation-message id=\"validation-message\" @invalid=${ this.#onInvalid } @valid=${ this.#onValid }>\n            <uui-input\n              id=\"input\"\n              label=\"Value\"\n              value=${ this.value }\n              @keydown=${ this.#onKeydown }\n              @input=${ this.#onInput }\n              @change=${ this.#onChange }\n              ?disabled=${ this.disabled }\n              ?readonly=${ this.readonly }\n              required=${ this.required }\n              required-message=\"Value is missing\"></uui-input>\n          </umb-form-validation-message>\n\n          ${ when(\n            !this.readonly,\n            () => html`\n              <uui-button\n                compact\n                color=\"danger\"\n                label=\"${ this.localize.term('general_remove') } ${ this.value }\"\n                look=\"outline\"\n                ?disabled=${ this.disabled }\n                @click=${ this.#onDelete }>\n                <uui-icon name=\"icon-trash\"></uui-icon>\n              </uui-button>\n            `,\n          ) }\n        `\n    }\n\n    static override styles = [\n        css`\n            :host {\n                display: flex;\n                align-items: center;\n                margin-bottom: var(--uui-size-space-3);\n                gap: var(--uui-size-space-3);\n            }\n\n            #validation-message {\n                flex: 1;\n            }\n\n            #input {\n                width: 100%;\n            }\n\n            .handle {\n                cursor: move;\n            }\n        `,\n    ]\n\n    protected override getFormElement = () => undefined\n}\n\nexport default AkInputDictionaryItemElement\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'ak-input-dictionary-item': AkInputDictionaryItemElement\n    }\n}\n","import type { UmbInputEvent, UmbDeleteEvent } from '@umbraco-cms/backoffice/event'\nimport { css, html, nothing, repeat, customElement, property, state } from '@umbraco-cms/backoffice/external/lit'\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event'\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element'\nimport { UmbSorterController } from '@umbraco-cms/backoffice/sorter'\nimport { UUIFormControlMixin } from \"@umbraco-cms/backoffice/external/uui\"\n\nimport AkInputDictionaryItemElement from './ak-input-dictionary-item.element'\n\n@customElement('ak-input-dictionary')\nexport class AkInputDictionaryElement extends UUIFormControlMixin(UmbLitElement, undefined) {\n    @state() private _items: Array<string> = []\n\n    #disabled = false\n    #readonly = false\n    \n    #sorter = new UmbSorterController(this, {\n        getUniqueOfElement: (element) => element.getAttribute('data-sort-entry-id'),\n        getUniqueOfModel: (modelEntry: string) => modelEntry,\n        identifier: 'AndrewK.SorterIdentifier.Dictionary',\n        itemSelector: 'ak-input-dictionary-item',\n        containerSelector: '#sorter-wrapper',\n        onChange: ({ model }) => {\n            const oldValue = this._items\n            this._items = model\n            this.requestUpdate('_items', oldValue)\n            this.dispatchEvent(new UmbChangeEvent())\n        },\n    })\n\n    constructor() {\n        super()\n\n        // TODO: we need a way to overwrite the missing value validator. Se we can validate on other properties than value\n        /*\n        this.removeValidator('valueMissing')\n\n        this.addValidator(\n            'valueMissing',\n            () => this.requiredMessage,\n            () => this.items.length > 0\n        )\n        */\n\n        this.addValidator(\n            'rangeUnderflow',\n            () => this.minMessage,\n            () => !!this.min && this._items.length < this.min,\n        )\n        this.addValidator(\n            'rangeOverflow',\n            () => this.maxMessage,\n            () => !!this.max && this._items.length > this.max,\n        )\n    }\n\n    @property({ type: Number }) min?: number\n    @property({ type: String, attribute: 'min-message' }) minMessage = 'This field need more items'\n    @property({ type: Number }) max?: number\n\n    @property({ type: String, attribute: 'min-message' })\n    maxMessage = 'This field exceeds the allowed amount of items'\n\n    @property({ type: Boolean, reflect: true })\n    public set disabled(value) {\n        this.#disabled = value\n        if (value) {\n            this.#sorter.disable()\n        }\n    }\n\n    public get disabled() {\n        return this.#disabled\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public set readonly(value) {\n        this.#readonly = value\n        if (value) {\n            this.#sorter.disable()\n        }\n    }\n\n    public get readonly() {\n        return this.#readonly\n    }\n\n    @property({ type: Array })\n    public get items(): Array<string> {\n        return this._items\n    }\n\n    public set items(items: Array<string>) {\n        // TODO: when we have a way to overwrite the missing value validator we can remove this\n        this.value = items?.length > 0 ? 'some value' : ''\n        this._items = items ?? []\n        this.#sorter.setModel(this.items)\n    }\n\n    // TODO: Some inputs might not have a value that is either FormDataEntryValue or FormData.\n    //  How do we handle this?\n    /*\n    @property()\n    public set value(value: FormDataEntryValue | FormData) {\n        throw new Error(`${this} does not support to set the value directly. Use items instead.`)\n    }\n    public get value() {\n        throw new Error(`${this} does not support to get the value directly. Use items instead.`)\n    }\n    */\n\n    override render() {\n        return html`\n          <div id=\"sorter-wrapper\">\n            ${ this.#renderItems() }\n          </div>\n          ${ this.#renderAddButton() }\n        `\n    }\n\n    async #onAdd() {\n        this._items = [ ...this._items, '' ]\n        this.pristine = false\n        this.dispatchEvent(new UmbChangeEvent())\n        await this.#focusNewItem()\n    }\n\n    #onInput(event: UmbInputEvent, currentIndex: number) {\n        event.stopPropagation()\n        const target = event.currentTarget as AkInputDictionaryItemElement\n        const value = target.value as string\n        this._items = this._items.map((item, index) => (index === currentIndex ? value : item))\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    async #focusNewItem() {\n        await this.updateComplete\n        const items = this.shadowRoot?.querySelectorAll(\n            'ak-input-dictionary-item',\n        ) as NodeListOf<AkInputDictionaryItemElement>\n        const newItem = items[items.length - 1]\n        await newItem.focus()\n    }\n\n    #deleteItem(event: UmbDeleteEvent, itemIndex: number) {\n        event.stopPropagation()\n        this._items = this._items.filter((_item, index) => index !== itemIndex)\n        this.pristine = false\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    #renderItems() {\n        return html`\n          ${ repeat(\n            this._items,\n            (_item, index) => index,\n            (item, index) => html`\n              <ak-input-dictionary-item\n                name=\"item-${ index }\"\n                data-sort-entry-id=${ item }\n                required\n                required-message=\"Item ${ index + 1 } is missing a value\"\n                value=${ item }\n                ?disabled=${ this.disabled }\n                ?readonly=${ this.readonly }\n                @enter=${ this.#onAdd }\n                @delete=${ (event: UmbDeleteEvent) => this.#deleteItem(event, index) }\n                @input=${ (event: UmbInputEvent) => this.#onInput(event, index) }\n              ></ak-input-dictionary-item>\n            `,\n          ) }\n        `\n    }\n\n    #renderAddButton() {\n        if (this.disabled || this.readonly) return nothing\n        return html`\n          <uui-button\n            color=\"default\"\n            id=\"action\"\n            label=\"Add\"\n            look=\"placeholder\"\n            ?disabled=${ this.disabled }\n            @click=${ this.#onAdd }\n          ></uui-button>\n        `\n    }\n\n    static override styles = [\n        css`\n            #action {\n                display: block;\n            }\n\n            .--umb-sorter-placeholder {\n                position: relative;\n                visibility: hidden;\n            }\n\n            .--umb-sorter-placeholder::after {\n                content: '';\n                position: absolute;\n                inset: 0;\n                border-radius: var(--uui-border-radius);\n                border: 1px dashed var(--uui-color-divider-emphasis);\n            }\n        `,\n    ]\n\n    override getFormElement = () => undefined\n}\n\nexport default AkInputDictionaryElement\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'ak-input-dictionary': AkInputDictionaryElement\n    }\n}\n","import { customElement, html, property, query, state } from '@umbraco-cms/backoffice/external/lit'\nimport { umbBindToValidation, UmbValidationContext } from '@umbraco-cms/backoffice/validation'\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element'\nimport { UMB_PROPERTY_CONTEXT } from '@umbraco-cms/backoffice/property'\nimport { UmbChangeEvent } from '@umbraco-cms/backoffice/event'\nimport {\n    UMB_SUBMITTABLE_WORKSPACE_CONTEXT,\n    UmbSubmittableWorkspaceContextBase,\n} from '@umbraco-cms/backoffice/workspace'\nimport type {\n    UmbPropertyEditorConfigCollection,\n    UmbPropertyEditorUiElement,\n} from '@umbraco-cms/backoffice/property-editor'\n\nimport AkInputDictionaryElement from \"./ak-input-dictionary.element\"\n\n@customElement('ak-property-editor-ui-dictionary')\nexport class AkPropertyEditorUIDictionaryElement extends UmbLitElement implements UmbPropertyEditorUiElement {\n    @state() private _label?: string\n    @state() private _min = 0\n    @state() private _max = Infinity\n\n    protected _validationContext = new UmbValidationContext(this)\n\n    @query('#input', true) protected _inputElement?: AkInputDictionaryElement\n\n    constructor() {\n        super()\n\n        this.consumeContext(UMB_PROPERTY_CONTEXT, (context) => {\n            this._label = context?.getLabel()\n        })\n\n        this.consumeContext(UMB_SUBMITTABLE_WORKSPACE_CONTEXT, (context) => {\n            if (context instanceof UmbSubmittableWorkspaceContextBase) {\n                context.addValidationContext(this._validationContext)\n            }\n        })\n    }\n\n    @property({ type: Array }) value?: Array<string>\n    @property({ type: Boolean, reflect: true }) disabled = false\n    @property({ type: Boolean, reflect: true }) readonly = false\n    @property({ type: Boolean, reflect: true }) required = false\n\n    public set config(config: UmbPropertyEditorConfigCollection | undefined) {\n        if (!config) return\n\n        this._min = Number(config.getValueByAlias('min')) || 0\n        this._max = Number(config.getValueByAlias('max')) || Infinity\n    }\n\n    #onChange(event: UmbChangeEvent) {\n        event.stopPropagation()\n        const target = event.currentTarget as AkInputDictionaryElement\n        this.value = target.items\n        this.dispatchEvent(new UmbChangeEvent())\n    }\n\n    #onValid = (event: Event) => event.stopPropagation()\n    #onInvalid = (event: Event) => event.stopPropagation()\n\n    override render() {\n        return html`\n          <umb-form-validation-message\n            id=\"validation-message\"\n            @invalid=${ this.#onInvalid }\n            @valid=${ this.#onValid }\n          >\n            <ak-input-dictionary\n              id=\"input\"\n              max=${ this._max }\n              min=${ this._min }\n              .items=${ this.value ?? [] }\n              ?disabled=${ this.disabled }\n              ?readonly=${ this.readonly }\n              ?required=${ this.required }\n              @change=${ this.#onChange }\n              ${ umbBindToValidation(this) }\n            ></ak-input-dictionary>\n          </umb-form-validation-message>\n        `\n    }\n\n    protected override firstUpdated() {\n        if (this._min && this._max && this._min > this._max) {\n            console.warn(\n                `Property '${ this._label }' (Dictionary) has been misconfigured, 'min' is greater than 'max'. Please correct your data type configuration.`,\n                this,\n            )\n        }\n    }\n}\n\nexport default AkPropertyEditorUIDictionaryElement\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'ak-property-editor-ui-dictionary': AkPropertyEditorUIDictionaryElement\n    }\n}\n"],"names":["_AkInputDictionaryItemElement_instances","onDelete_fn","onInput_fn","onKeydown_fn","onChange_fn","_onValid","_onInvalid","AkInputDictionaryItemElement","UUIFormControlMixin","UmbLitElement","__privateAdd","event","_a","html","nothing","__privateGet","__privateMethod","when","umbConfirmModal","UmbDeleteEvent","target","UmbInputEvent","UmbChangeEvent","css","__decorateClass","property","query","customElement","_disabled","_readonly","_sorter","_AkInputDictionaryElement_instances","onAdd_fn","focusNewItem_fn","deleteItem_fn","renderItems_fn","renderAddButton_fn","AkInputDictionaryElement","UmbSorterController","element","modelEntry","model","oldValue","value","__privateSet","items","currentIndex","item","index","itemIndex","_item","repeat","state","_AkPropertyEditorUIDictionaryElement_instances","AkPropertyEditorUIDictionaryElement","UmbValidationContext","UMB_PROPERTY_CONTEXT","context","UMB_SUBMITTABLE_WORKSPACE_CONTEXT","UmbSubmittableWorkspaceContextBase","config","umbBindToValidation","AkPropertyEditorUIDictionaryElement$1"],"mappings":"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"}